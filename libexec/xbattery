#!/usr/local/bin/wish8.5
#
# OpenBSD battery level thingymabobber
#
#   doas pkg_add tk

set width 150
set height 32
set xoff 490
set yoff -4

set period 59999 ;# milliseconds between updates
set status ?
set warning 900  ;# estimated seconds left below which a warning is shown
# watthour2 but a bit higher so things turn yellow before I might wander
# off to get snacks or such
set warnwh 4

font create TtyFont -family Courier -size 14 -weight bold

set label [label .disp -background white -foreground black \
  -width $width -height $height -font TtyFont -textvariable status]

proc whvalue {sensor name} {
    set reading [exec sysctl -n $sensor]
    upvar 1 $name x
    if {![regexp {^([\d.]+) } $reading -> x]} {
        return -code error "$sensor parse fail on '$reading'"
    }
}

if {[catch {whvalue hw.sensors.acpibat0.watthour2 lowcap} result]} {
    exec logger -s -t xbattery "error: $result"
    exit 1
}
if {[catch {whvalue hw.sensors.acpibat0.watthour3 prevc} result]} {
    exec logger -s -t xbattery "error: $result"
    exit 1
}

set prevs [clock seconds]

proc getbatlevel {} {
    global status label lowcap period prevc prevs warning warnwh
    if {[catch {whvalue hw.sensors.acpibat0.watthour3 curr} result]} {
        exec logger -s -t xbattery "error: $result"
        bell
        $label configure -background red
        after $period [list getbatlevel]
        return
    }
    # delta warning is for when usage is high and I might otherwise wander
    # instead of plugging the laptop back in
    set time [clock seconds]
    set fails $warning
    set deltac [expr $curr - $prevc]
    set deltas [expr $time - $prevs]
    if {$deltas > 0} {
        set m [expr $deltac / $deltas]
        set b [expr $curr - $m * $time]
        set fails [format "%.f" [expr (($lowcap - $b) / $m) - $time]]
        set drain [format {%+.2f} [expr ($deltac * 60) / $deltas]]
    } else {
        set drain n/a
    }
    if {$curr < $lowcap} {
        bell
        $label configure -background red
    } elseif {$curr < $warnwh || ($fails < $warning && $deltac < 0)} {
        $label configure -background yellow
    } else {
        $label configure -background green
    }
    set status [format {%.1f %s} $curr $drain]
    set prevc $curr
    set prevs $time
    after $period [list getbatlevel]
}

# label floats in middle of the window
pack $label
grid .disp -row 1 -column 1
grid rowconfigure . 1 -weight 1
grid columnconfigure . 1 -weight 1

bind . <q> { exit }
bind . <r> {
    exec ~/libexec/xbattery &
    exit
}
bind . <s> {
    after cancel [after info]
    getbatlevel
}

wm geometry . [format "%dx%d%+d%+d" $width $height $xoff $yoff]

getbatlevel
